# app.py

import streamlit as st
import pandas as pd
import joblib
import plotly.express as px
import plotly.graph_objects as go
from sklearn.metrics import confusion_matrix
import numpy as np
import os # Importamos a biblioteca 'os' para manipula√ß√£o de arquivos

# Configura√ß√µes da p√°gina
st.set_page_config(layout="wide")

# ====================================================================
# Constantes e Carregamento de Recursos
# ====================================================================

# Definindo a paleta de cores consistente
CHURN_COLORS = {'0': '#1f77b4', '1': '#ff7f0e'}  # Azul para 'N√£o Evadiu', Laranja para 'Evadiu'
PLOTLY_CMAP = 'RdBu_r'

# Carregar o DataFrame dos dados j√° processados para os gr√°ficos
@st.cache_data(show_spinner="Carregando e processando dados...")
def load_data():
    """Carrega e pr√©-processa os dados para os gr√°ficos."""
    try:
        # CORRE√á√ÉO: O arquivo agora est√° na mesma pasta que app.py, ent√£o removemos o caminho relativo.
        df = pd.read_csv('dados_tratados.csv')
        df = df.drop(columns=['customerID', 'Contas_Diarias'])
        
        # Corre√ß√£o: remove linhas com valores ausentes em 'Churn' e converte para string
        df = df.dropna(subset=['Churn'])
        df['Churn'] = df['Churn'].astype(str)
        
        # Separar a coluna Churn do restante do DataFrame para o one-hot encoding
        churn_column = df['Churn']
        df_to_encode = df.drop(columns=['Churn'])
        
        df_encoded = pd.get_dummies(df_to_encode, drop_first=True)
        
        # Adicionar a coluna Churn de volta ao DataFrame codificado
        df_encoded['Churn'] = churn_column.values

        return df, df_encoded
    except FileNotFoundError:
        st.error("Erro: O arquivo 'dados_tratados.csv' n√£o foi encontrado. Certifique-se de que ele est√° no diret√≥rio correto.")
        st.stop() # Interrompe a execu√ß√£o para evitar o loading infinito
        return None, None
    except Exception as e:
        st.error(f"Ocorreu um erro ao carregar os dados: {e}")
        st.stop()
        return None, None

# Carregar o modelo, o scaler e as colunas (melhor pr√°tica)
@st.cache_resource(show_spinner="Carregando modelo e recursos...")
def load_model_resources():
    """Carrega os recursos do modelo salvos em arquivos .pkl."""
    try:
        model = joblib.load('random_forest_model.pkl')
        scaler = joblib.load('scaler.pkl')
        feature_columns = joblib.load('feature_columns.pkl')
        return model, scaler, feature_columns
    except FileNotFoundError:
        st.error("Erro: Arquivos do modelo (.pkl) n√£o foram encontrados. Por favor, treine o modelo e salve-o primeiro no seu notebook.")
        st.stop() # Interrompe a execu√ß√£o para evitar o loading infinito
        return None, None, None
    except Exception as e:
        st.error(f"Ocorreu um erro ao carregar os recursos do modelo: {e}")
        st.stop()
        return None, None, None

# ====================================================================
# Layout da Aplica√ß√£o Streamlit
# ====================================================================

# T√≠tulo e cabe√ßalho
st.title('TelecomX - An√°lise de Evas√£o de Clientes (Churn)')
st.markdown("### Relat√≥rio Detalhado e Estrat√©gias de Reten√ß√£o")

# --- Ferramenta de Diagn√≥stico na Sidebar ---
with st.sidebar:
    st.header("üõ†Ô∏è Diagn√≥stico de Arquivos")
    st.markdown("Isso ajuda a verificar quais arquivos sua aplica√ß√£o consegue enxergar.")
    
    current_directory = os.getcwd()
    st.write(f"Diret√≥rio de trabalho atual: `{current_directory}`")

    try:
        st.write("Arquivos encontrados:")
        files_in_dir = os.listdir(current_directory)
        for file in files_in_dir:
            st.markdown(f"- `{file}`")
    except Exception as e:
        st.error(f"N√£o foi poss√≠vel listar os arquivos: {e}")

# Iniciar o carregamento dos dados e recursos do modelo
df_raw, df_encoded = load_data()
model, scaler, feature_columns = load_model_resources()


# O restante do c√≥digo permanece o mesmo
if df_raw is not None and model is not None:
    # ====================================================================
    # Se√ß√£o 1: Resumo Executivo
    # ====================================================================
    st.header('1. Resumo Executivo')
    st.markdown("""
    Este relat√≥rio apresenta os resultados de um projeto de Machine Learning com o objetivo de prever a evas√£o de clientes (Churn) e identificar os fatores mais relevantes que levam a essa evas√£o. O modelo **Random Forest** foi selecionado por seu desempenho superior, alcan√ßando um Recall de 91%, indicando uma alta capacidade de identificar clientes em risco de evas√£o.
    """)

    # ====================================================================
    # Se√ß√£o 2: Fatores Chave que Influenciam a Evas√£o
    # ====================================================================
    st.header('2. Fatores Chave de Evas√£o')
    st.markdown("""
    A an√°lise de import√¢ncia de vari√°veis do modelo Random Forest revelou os seguintes insights:
    - **Tempo de Contrato (`customer_tenure`):** √â o fator mais importante. Clientes novos t√™m maior propens√£o a evadir.
    - **Tipo de Contrato (`account_Contract`):** Clientes com contratos `m√™s a m√™s` s√£o mais propensos a sair.
    - **Servi√ßos Adicionais:** A falta de `OnlineSecurity` e `TechSupport` aumenta o risco de churn.
    """)

    # Recriar o DataFrame de import√¢ncia de features para o gr√°fico
    X = df_encoded.drop('Churn', axis=1)
    importance_df = pd.DataFrame({
        'Import√¢ncia': model.feature_importances_,
        'Vari√°vel': X.columns
    }).sort_values(by='Import√¢ncia', ascending=False).head(10)

    fig_imp = px.bar(importance_df,
                        x='Import√¢ncia',
                        y='Vari√°vel',
                        title='Top 10 Vari√°veis mais Importantes (Random Forest)',
                        color_discrete_sequence=px.colors.sequential.Plotly3)
    st.plotly_chart(fig_imp)

    # ====================================================================
    # Se√ß√£o 3: Visualiza√ß√µes Detalhadas
    # ====================================================================
    st.header('3. Visualiza√ß√µes Detalhadas')
    st.write('Explore a seguir as principais distribui√ß√µes de vari√°veis em rela√ß√£o √† evas√£o de clientes.')

    # Boxplot para Tempo de Contrato
    fig_tenure = px.box(df_raw,
                        x='Churn',
                        y='customer_tenure',
                        color='Churn',
                        color_discrete_map=CHURN_COLORS,
                        title='Distribui√ß√£o de Tempo de Contrato por Evas√£o')
    st.plotly_chart(fig_tenure)

    # Boxplot para Gasto Total
    fig_total_charges = px.box(df_raw,
                                x='Churn',
                                y='account_Charges.Total',
                                color='Churn',
                                color_discrete_map=CHURN_COLORS,
                                title='Distribui√ß√£o de Gasto Total por Evas√£o')
    st.plotly_chart(fig_total_charges)

    # Matriz de Correla√ß√£o
    st.subheader('Matriz de Correla√ß√£o das Vari√°veis')
    corr_matrix = df_encoded.corr()
    fig_corr = px.imshow(corr_matrix,
                            labels=dict(x="Vari√°veis", y="Vari√°veis", color="Correla√ß√£o"),
                            x=corr_matrix.columns,
                            y=corr_matrix.columns,
                            color_continuous_scale=PLOTLY_CMAP,
                            title='Matriz de Correla√ß√£o Interativa')
    st.plotly_chart(fig_corr)

    # ====================================================================
    # Se√ß√£o 4: Estrat√©gias de Reten√ß√£o
    # ====================================================================
    st.header('4. Estrat√©gias de Reten√ß√£o Propostas')
    st.markdown("""
    Com base nos insights obtidos, recomendamos as seguintes a√ß√µes:
    - **Programa de Engajamento para Novos Clientes:** Desenvolver um programa de onboarding focado nos primeiros meses de contrato.
    - **Incentivos para Contratos de Longo Prazo:** Oferecer descontos e benef√≠cios para clientes que migrarem de contratos mensais para anuais.
    - **Pacotes de Servi√ßos Agregados:** Criar pacotes que combinem internet de alta velocidade com servi√ßos de seguran√ßa e suporte t√©cnico.
    - **A√ß√µes Proativas de Atendimento:** Utilizar o modelo de previs√£o para identificar clientes em risco e abord√°-los proativamente.
    """)

    # ====================================================================
    # Se√ß√£o 5: Previs√£o de Novo Cliente (Funcionalidade Extra)
    # ====================================================================
    st.header('5. Previs√£o de Churn para um Novo Cliente')
    st.write('Insira os dados de um cliente para prever sua probabilidade de evas√£o (Churn).')

    colunas_numericas = ['customer_tenure', 'account_Charges.Monthly', 'account_Charges.Total']
    
    with st.form("churn_prediction_form"):
        # Interface de entrada de dados (simplificada para demonstra√ß√£o)
        st.subheader("Informa√ß√µes do Cliente")
        col1, col2 = st.columns(2)
        with col1:
            tenure = st.slider('Tempo de Contrato (meses)', min_value=1, max_value=72, value=12)
            monthly_charges = st.slider('Gasto Mensal', min_value=18.0, max_value=118.0, value=70.0)
            contract = st.selectbox('Tipo de Contrato', ['month-to-month', 'one year', 'two year'])
        with col2:
            total_charges = st.number_input('Gasto Total', min_value=0.0, value=1000.0)
            internet_service = st.selectbox('Servi√ßo de Internet', ['dsl', 'fiber optic', 'no internet service'])
            online_security = st.selectbox('Seguran√ßa Online (1=Sim, 0=N√£o)', [0, 1])
            tech_support = st.selectbox('Suporte T√©cnico (1=Sim, 0=N√£o)', [0, 1])

        # Bot√£o de submiss√£o
        submitted = st.form_submit_button("Prever Churn")

        if submitted:
            # Criar um DataFrame com os dados de entrada
            input_data = pd.DataFrame([{
                'customer_tenure': tenure,
                'account_Charges.Monthly': monthly_charges,
                'account_Charges.Total': total_charges,
                'internet_OnlineSecurity_Yes': online_security,
                'internet_TechSupport_Yes': tech_support,
                'account_Contract_One year': 1 if contract == 'one year' else 0,
                'account_Contract_Two year': 1 if contract == 'two year' else 0,
                'internet_InternetService_Fiber optic': 1 if internet_service == 'fiber optic' else 0,
                'internet_InternetService_No internet service': 1 if internet_service == 'no internet service' else 0,
            }])

            # Adicionar colunas faltantes com valor 0 para garantir consist√™ncia
            for col in feature_columns:
                if col not in input_data.columns:
                    input_data[col] = 0

            # Padronizar os dados num√©ricos do novo cliente
            input_data[colunas_numericas] = scaler.transform(input_data[colunas_numericas])

            # Fazer a previs√£o
            churn_prediction = model.predict(input_data[feature_columns])
            churn_prob = model.predict_proba(input_data[feature_columns])[0][1]

            if churn_prediction[0] == 1:
                st.error(f'Aten√ß√£o: Este cliente tem alta probabilidade de evas√£o! Probabilidade: {churn_prob:.2f}')
            else:
                st.success(f'Este cliente tem baixa probabilidade de evas√£o. Probabilidade: {churn_prob:.2f}')
else:
    st.warning("Ocorreu um problema ao carregar os dados ou o modelo. Verifique a se√ß√£o de diagn√≥stico na barra lateral.")
